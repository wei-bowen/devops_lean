gawk编程语言
	a)可以定义变量来保存数据
	b)可以使用算术和字符串操作符来处理数据
	c)可以使用结构化编程概念来为数据处理增加处理逻辑
	d)可以通过提取数据文件中的数据元素，将其重新排列或格式化，生成格式化报告

命令格式: gawk options program file
options
	-F fs			: 指定分隔符
	-f file			: 从指定文件读取命令
	-v var=value	: 设置变量
	-mf N			：指定要处理的数据文件中最大字段数N
	-mr N			: 指定数据文件中最大数据行数N
	-W keyword		: 指定gawk的兼容模式或警告等级
	
1、基本使用
gawk '{print "hello world"}'						##此时未指定数据文件，gawk需要从标准输入中读取。

2、使用分隔符截取字段
gawk -F":" '{print $1" "$2}' /etc/passwd			## -F指定分隔符:，不指定时默认使用空白分隔符，$n是代表按分隔符拆分后的第几个单词，其中$0代表整个文本行。多个字段之间如果要加空格也需要

3、使用多个命令读取处理标准输入
[root@hostname ~]# echo "My name is Rich" | gawk '{$4="poor";print $0}'		##多个命令使用;区分,也可以直接换行
My name is poor																##默认按空白符分割，$4是Rich,被替换成了poor

4、读取脚本中的命令进行处理
[root@hostname ~]# cat replace.awk
{print $1 " 's home directory is " $6}										## 如果需要多条命令，换行即可，无需分号

[root@hostname ~]# gawk -F: -f repla.awk /etc/passwd
root's home directory is /root
bin's home directory is /bin
....

5、使用BEGIN关键字在数据处理前运行命令，END在数据处理完成后再运行命令
[root@hostname ~]# gawk -F: 'BEGIN {print "start print the user'\'' home directory"} {print $1"'\''s home directory is "$6} END {print "print done"}' /etc/passwd
start print the user' home directory
root's home directory is /root
bin's home directory is /bin
....
print done
##注意，打印双引号时直接\"转义即可，打印单引号以'\''的形式，用两个单引号将\'包括在内
